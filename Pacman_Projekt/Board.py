import pygame
import config as c
from math import pi as PI

# 0 = prazni kvadrat, 1 = mala točka, 2 = velika točka, 3 = okomita linija,
# 4 = vodoravna linija, 5 = gore desno, 6 = gore lijevo, 7 = dolje lijevo, 8 = dolje desno
# 9 = bijela vrata
board = [
[6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5],
[3, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 3],
[3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3],
[3, 3, 1, 6, 4, 4, 5, 1, 6, 4, 4, 4, 5, 1, 3, 3, 1, 6, 4, 4, 4, 5, 1, 6, 4, 4, 5, 1, 3, 3],
[3, 3, 2, 3, 0, 0, 3, 1, 3, 0, 0, 0, 3, 1, 3, 3, 1, 3, 0, 0, 0, 3, 1, 3, 0, 0, 3, 2, 3, 3],
[3, 3, 1, 7, 4, 4, 8, 1, 7, 4, 4, 4, 8, 1, 7, 8, 1, 7, 4, 4, 4, 8, 1, 7, 4, 4, 8, 1, 3, 3],
[3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3],
[3, 3, 1, 6, 4, 4, 5, 1, 6, 5, 1, 6, 4, 4, 4, 4, 4, 4, 5, 1, 6, 5, 1, 6, 4, 4, 5, 1, 3, 3],
[3, 3, 1, 7, 4, 4, 8, 1, 3, 3, 1, 7, 4, 4, 5, 6, 4, 4, 8, 1, 3, 3, 1, 7, 4, 4, 8, 1, 3, 3],
[3, 3, 1, 1, 1, 1, 1, 1, 3, 3, 1, 1, 1, 1, 3, 3, 1, 1, 1, 1, 3, 3, 1, 1, 1, 1, 1, 1, 3, 3],
[3, 7, 4, 4, 4, 4, 5, 1, 3, 7, 4, 4, 5, 0, 3, 3, 0, 6, 4, 4, 8, 3, 1, 6, 4, 4, 4, 4, 8, 3],
[3, 0, 0, 0, 0, 0, 3, 1, 3, 6, 4, 4, 8, 0, 7, 8, 0, 7, 4, 4, 5, 3, 1, 3, 0, 0, 0, 0, 0, 3],
[3, 0, 0, 0, 0, 0, 3, 1, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 1, 3, 0, 0, 0, 0, 0, 3],
[8, 0, 0, 0, 0, 0, 3, 1, 3, 3, 0, 6, 4, 4, 9, 9, 4, 4, 5, 0, 3, 3, 1, 3, 0, 0, 0, 0, 0, 7],
[4, 4, 4, 4, 4, 4, 8, 1, 7, 8, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0, 7, 8, 1, 7, 4, 4, 4, 4, 4, 4],
[0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],
[4, 4, 4, 4, 4, 4, 5, 1, 6, 5, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0, 6, 5, 1, 6, 4, 4, 4, 4, 4, 4],
[5, 0, 0, 0, 0, 0, 3, 1, 3, 3, 0, 7, 4, 4, 4, 4, 4, 4, 8, 0, 3, 3, 1, 3, 0, 0, 0, 0, 0, 6],
[3, 0, 0, 0, 0, 0, 3, 1, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 1, 3, 0, 0, 0, 0, 0, 3],
[3, 0, 0, 0, 0, 0, 3, 1, 3, 3, 0, 6, 4, 4, 4, 4, 4, 4, 5, 0, 3, 3, 1, 3, 0, 0, 0, 0, 0, 3],
[3, 6, 4, 4, 4, 4, 8, 1, 7, 8, 0, 7, 4, 4, 5, 6, 4, 4, 8, 0, 7, 8, 1, 7, 4, 4, 4, 4, 5, 3],
[3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3],
[3, 3, 1, 6, 4, 4, 5, 1, 6, 4, 4, 4, 5, 1, 3, 3, 1, 6, 4, 4, 4, 5, 1, 6, 4, 4, 5, 1, 3, 3],
[3, 3, 1, 7, 4, 5, 3, 1, 7, 4, 4, 4, 8, 1, 7, 8, 1, 7, 4, 4, 4, 8, 1, 3, 6, 4, 8, 1, 3, 3],
[3, 3, 2, 1, 1, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 1, 1, 2, 3, 3],
[3, 7, 4, 5, 1, 3, 3, 1, 6, 5, 1, 6, 4, 4, 4, 4, 4, 4, 5, 1, 6, 5, 1, 3, 3, 1, 6, 4, 8, 3],
[3, 6, 4, 8, 1, 7, 8, 1, 3, 3, 1, 7, 4, 4, 5, 6, 4, 4, 8, 1, 3, 3, 1, 7, 8, 1, 7, 4, 5, 3],
[3, 3, 1, 1, 1, 1, 1, 1, 3, 3, 1, 1, 1, 1, 3, 3, 1, 1, 1, 1, 3, 3, 1, 1, 1, 1, 1, 1, 3, 3],
[3, 3, 1, 6, 4, 4, 4, 4, 8, 7, 4, 4, 5, 1, 3, 3, 1, 6, 4, 4, 8, 7, 4, 4, 4, 4, 5, 1, 3, 3],
[3, 3, 1, 7, 4, 4, 4, 4, 4, 4, 4, 4, 8, 1, 7, 8, 1, 7, 4, 4, 4, 4, 4, 4, 4, 4, 8, 1, 3, 3],
[3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3],
[3, 7, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 8, 3],
[7, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 8]
]

intersections = [
[2.5,2.5],[7.5,2.5],[13.5,2.5],[16.5,2.5],[22.5,2.5],[27.5,2.5],
[2.5,6.5],[7.5,6.5],[10.5,6.5],[13.5,6.5],[16.5,6.5],[19.5,6.5],[22.5,6.5],[27.5,6.5],
[2.5,9.5],[7.5,9.5],[10.5,9.5],[13.5,9.5],[16.5,9.5],[19.5,9.5],[22.5,9.5],[27.5,9.5],
[10.5,12.5],[13.5,12.5],[15,12.5],[16.5,12.5],[19.5,12.5],
[7.5,15.5],[10.5,15.5],[19.5,15.5],[22.5,15.5],
[10.5,18.5],[19.5,18.5],
[2.5,21.5],[7.5,21.5],[10.5,21.5],[13.5,21.5],[16.5,21.5],[19.5,21.5],[22.5,21.5],[27.5,21.5],
[2.5,24.5],[4.5,24.5],[7.5,24.5],[10.5,24.5],[13.5,24.5],[16.5,24.5],[19.5,24.5],[22.5,24.5],[25.5,24.5],[27.5,24.5],
[2.5,27.5],[4.5,27.5],[7.5,27.5],[10.5,27.5],[13.5,27.5],[16.5,27.5],[19.5,27.5],[22.5,27.5],[25.5,27.5],[27.5,27.5],
[2.5,30.5],[13.5,30.5],[16.5,30.5],[27.5,30.5],
]

class Board():
    def drawBoard():
        num1 = ((c.HEIGHT - 50) // 32)
        num2 = (c.WIDTH // 30)
        dotNumber = 0

        # Vrti se samo jednom, na početku, i to kako bi se u zasebnu listu odvojilo u obliku Recta sve 1 i 2 iz boards,
        # kako bi se moglo u mainu provjeriti koji se dot pojeo i pretvoriti istog u 0. Najprecizniji način jedenja koji sam uspio izvesti.
        # U idućoj petlji se zatim iz te liste uzima potreban dot i iscrtava ga se.
        if c.firstRun:
            c.dotsRectsList = []
            for i in range(len(board)):
                for j in range(len(board[i])):
                    if board[i][j] == 1:
                        dot = pygame.Rect((j * num2 + (0.5 * num2))-3, (i * num1 + (0.5 * num1))-3,6,6)
                        c.dotsRectsList.append(dot)
                    if board[i][j] == 2:
                        dot = pygame.Rect((j * num2 + (0.5 * num2))-8, (i * num1 + (0.5 * num1))-8,16,16)
                        c.dotsRectsList.append(dot)

        for i in range(len(board)):
            for j in range(len(board[i])):
                if board[i][j] == 1:
                    if dotNumber in c.eatenDotsList:
                        pygame.draw.rect(c.screen, c.BLACK, c.dotsRectsList[dotNumber])
                    else:
                        pygame.draw.rect(c.screen, c.WHITE, c.dotsRectsList[dotNumber])
                    dotNumber += 1

                if board[i][j] == 2:
                    if dotNumber in c.eatenDotsList:
                        pygame.draw.rect(c.screen, c.BLACK, c.dotsRectsList[dotNumber])
                    else:
                        pygame.draw.rect(c.screen, c.WHITE, c.dotsRectsList[dotNumber])
                    dotNumber += 1
                if board[i][j] == 3:
                    pygame.draw.line(c.screen, c.BLUE, (j * num2 + (0.5 * num2), i * num1),
                                    (j * num2 + (0.5 * num2), i * num1 + num1), 3)
                if board[i][j] == 4:
                    pygame.draw.line(c.screen, c.BLUE, (j * num2, i * num1 + (0.5 * num1)),
                                    (j * num2 + num2, i * num1 + (0.5 * num1)), 3)
                if board[i][j] == 5:
                    pygame.draw.arc(c.screen, c.BLUE, [(j * num2 - (num2 * 0.4)) - 2, (i * num1 + (0.5 * num1)), num2, num1],
                                    0, PI / 2, 3)
                if board[i][j] == 6:
                    pygame.draw.arc(c.screen, c.BLUE,
                                    [(j * num2 + (num2 * 0.5)), (i * num1 + (0.5 * num1)), num2, num1], PI / 2, PI, 3)
                if board[i][j] == 7:
                    pygame.draw.arc(c.screen, c.BLUE, [(j * num2 + (num2 * 0.5)), (i * num1 - (0.4 * num1)), num2, num1], PI,
                                    3 * PI / 2, 3)
                if board[i][j] == 8:
                    pygame.draw.arc(c.screen, c.BLUE,
                                    [(j * num2 - (num2 * 0.4)) - 2, (i * num1 - (0.4 * num1)), num2, num1], 3 * PI / 2,
                                    2 * PI, 3)
                if board[i][j] == 9:
                    pygame.draw.line(c.screen, c.WHITE, (j * num2, i * num1 + (0.5 * num1)),
                                    (j * num2 + num2, i * num1 + (0.5 * num1)), 3)

        